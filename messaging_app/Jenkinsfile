pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.9'
        DOCKER_IMAGE = 'messaging-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_HUB_REPO = 'YOUR_DOCKERHUB_USERNAME/messaging-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/YOUR_USERNAME/alx-backend-python.git'
                
                echo "Current directory: ${pwd()}"
                sh "ls -la"
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    python3 --version
                    python3 -m venv venv || true
                    source venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Database Migration') {
            steps {
                echo 'Running database migrations...'
                sh '''
                    source venv/bin/activate
                    python manage.py makemigrations
                    python manage.py migrate --no-input
                '''
            }
        }
        
        stage('Tests') {
            steps {
                echo 'Running pytest tests...'
                sh '''
                    source venv/bin/activate
                    pytest chats/tests.py -v --tb=short --junitxml=test-report.xml --cov=. --cov-report=xml --cov-report=html
                '''
            }
            post {
                always {
                    // Publish test results
                    junit 'test-report.xml'
                    
                    // Publish coverage reports
                    publishHTML([
                        reportDir: 'htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
                success {
                    echo 'All tests passed!'
                }
                failure {
                    echo 'Some tests failed!'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh '''
                    docker build -t ${DOCKER_HUB_REPO}:${DOCKER_TAG} .
                    docker tag ${DOCKER_HUB_REPO}:${DOCKER_TAG} ${DOCKER_HUB_REPO}:latest
                '''
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Logging in to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo '${DOCKER_PASS}' | docker login -u '${DOCKER_USER}' --password-stdin"
                }
                
                echo 'Pushing Docker image to Docker Hub...'
                sh '''
                    docker push ${DOCKER_HUB_REPO}:${DOCKER_TAG}
                    docker push ${DOCKER_HUB_REPO}:latest
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up Docker images...'
            sh '''
                docker rmi ${DOCKER_HUB_REPO}:${DOCKER_TAG} || true
                docker rmi ${DOCKER_HUB_REPO}:latest || true
                docker system prune -f || true
            '''
            echo 'Pipeline completed!'
        }
        success {
            echo 'Pipeline succeeded - Docker image built and pushed to Docker Hub!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

