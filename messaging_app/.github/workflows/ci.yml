name: Django CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE_NAME: messaging-app
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: messaging_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libmysqlclient-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Django test environment variables
        run: |
          echo "DJANGO_SETTINGS_MODULE=messaging_app.settings_test" >> $GITHUB_ENV
          echo "TEST=True" >> $GITHUB_ENV
          echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MYSQL_PORT=3306" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=messaging_test" >> $GITHUB_ENV
          echo "MYSQL_USER=testuser" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=testpass" >> $GITHUB_ENV

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u testuser -ptestpass -e "SELECT 1" >/dev/null 2>&1; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Create test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u testuser -ptestpass -e "CREATE DATABASE IF NOT EXISTS messaging_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"

      - name: Run Django migrations
        run: |
          python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: messaging_app.settings_test

      - name: Run tests with pytest
        run: |
          pytest chats/tests.py -v --tb=short --junitxml=test-report.xml --cov=. --cov-report=xml --cov-report=html
        env:
          DJANGO_SETTINGS_MODULE: messaging_app.settings_test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            test-report.xml
            htmlcov/
            coverage.xml

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          test_results_files: test-report.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Coverage summary
        if: always()
        run: |
          echo "## Coverage Report for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage.xml ]; then
            echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8 linting
        id: flake8
        run: |
          echo "Running flake8 linting checks..."
          echo "Using configuration from .flake8 file"

          # Run flake8 - will exit with code 1 if errors found, 0 if no errors
          # Errors found will fail the build
          flake8 . \
            --count \
            --statistics || linting_failed=$?

          if [ "$linting_failed" -eq 1 ]; then
            echo "exited=1" >> $GITHUB_OUTPUT
            echo "Linting errors found!"
          else
            echo "exited=0" >> $GITHUB_OUTPUT
            echo "All linting checks passed!"
          fi

      - name: Linting summary
        if: always()
        run: |
          echo "## Linting Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.flake8.outcome }}" == "success" ]; then
            echo "✅ **All linting checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting errors found! Build will fail.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the linting errors before merging." >> $GITHUB_STEP_SUMMARY
          fi

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/messaging-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/messaging-app:buildcache
          cache-to: type=inline,mode=max

      - name: Image digest
        run: echo "Image built and pushed successfully"
